{"version":3,"sources":["Component/ProductList.js","Component/ProductForm.js","Component/Login.js","Component/Signup.js","App.js","serviceWorker.js","Stores/ProductStore.js","Stores/RouterStore.js","index.js"],"names":["ProductList","observer","handleDelete","record","props","ProductStore","deleteProduct","handleEdit","editProduct","columns","title","dataIndex","key","align","render","text","type","style","margin","color","size","onClick","danger","data","this","getProducts","map","product","index","push","name","description","price","amount","dataSource","Component","inject","ProductForm","formRef","React","createRef","onFinish","values","dataUpdate","addProduct","current","resetFields","onFinishFailed","errorInfo","console","log","renderForm","tailLayout","wrapperCol","offset","span","setFieldsValue","labelCol","ref","Item","label","htmlType","Login","changeLogin","RouterStore","changeSignup","getListUser","filter","user","username","password","length","changeContent","alert","initialValues","remember","rules","required","message","Password","textAlign","SignUp","addUser","App","getContent","className","getEditing","getLogin","getSignup","Boolean","window","location","hostname","match","productList","productEdit","unshift","productDelete","editing","decorate","observable","action","computed","store","listUser","login","signup","content","bool","Roots","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"sVAMMA,EAAcC,YAAQ,4MAExBC,aAAe,SAACC,GACd,EAAKC,MAAMC,aAAaC,cAAcH,IAHhB,EAMxBI,WAAa,SAACJ,GACZ,EAAKC,MAAMC,aAAaG,YAAYL,IAPd,uDASd,IAAD,OACDM,EAAU,CACd,CACEC,MAAO,OACPC,UAAW,OACXC,IAAK,OACLC,MAAO,SACPC,OAAQ,SAACC,GAAD,OAAU,8BAAOA,KAE3B,CACEL,MAAO,cACPC,UAAW,cACXC,IAAK,cACLC,MAAO,UAET,CACEH,MAAO,QACPC,UAAW,QACXC,IAAK,QACLC,MAAO,SACPC,OAAQ,SAACC,GAAD,OAAU,8BAAOA,EAAP,eAEpB,CACEL,MAAO,SACPE,IAAK,SACLD,UAAW,SACXE,MAAO,SACPC,OAAQ,SAACC,GAAD,OACN,8BACE,kBAAC,IAAD,CAAQC,KAAK,WAAb,KACA,4BACEC,MAAO,CACLC,OAAQ,SACRC,MAAM,GAAD,QAAMJ,EAAO,EAAI,OAAS,UAG/BA,EAAO,EAAIA,EAAO,oBAEtB,kBAAC,IAAD,CAAQC,KAAK,WAAb,QAIN,CACEN,MAAO,SACPE,IAAK,SACLE,OAAQ,SACNC,EACAZ,GAFM,OAIN,kBAAC,IAAD,CAAOiB,KAAK,UACV,kBAAC,IAAD,CAAQJ,KAAK,UAAUK,QAAS,kBAAM,EAAKd,WAAWJ,KAAtD,QAGA,kBAAC,IAAD,CACEa,KAAK,UACLK,QAAS,kBAAM,EAAKnB,aAAaC,IACjCmB,QAAM,GAHR,cAYJC,EAAO,GAWX,OAVAC,KAAKpB,MAAMC,aAAaoB,YAAYC,KAAI,SAACC,EAASC,GAAV,OACtCL,EAAKM,KAAK,CACRjB,IAAKgB,EACLE,KAAMH,EAAQG,KACdC,YAAaJ,EAAQI,YACrBC,MAAOL,EAAQK,MACfC,OAAQN,EAAQM,YAIb,kBAAC,IAAD,CAAOxB,QAASA,EAASyB,WAAYX,QArFtB,GACAY,cAyFbC,cAAO,eAAPA,CAAuBpC,G,kBC5FhCqC,EAAcpC,YAAQ,4MAExBqC,QAAUC,IAAMC,YAFQ,EAIxBC,SAAW,SAACC,GACV,EAAKtC,MAAMC,aAAaC,cAAc,EAAKF,MAAMuC,YACjD,EAAKvC,MAAMC,aAAauC,WAAWF,GACnC,EAAKtC,MAAMC,aAAaG,YAAY,IACpC,EAAK8B,QAAQO,QAAQC,eARC,EAWxBC,eAAiB,SAACC,GAChBC,QAAQC,IAAI,UAAWF,IAZD,EAexBG,WAAa,WACX,IAIMC,EAAa,CACjBC,WAAY,CAAEC,OAAQ,GAAIC,KAAM,KAIlC,GAAI,EAAKnD,MAAMuC,WAAWb,KAAM,CAAC,IACvBa,EAAe,EAAKvC,MAApBuC,WACR,EAAKL,QAAQO,QAAQW,eAAe,CAClC1B,KAAMa,EAAWb,KAAOa,EAAWb,KAAO,GAC1CC,YAAaY,EAAWZ,YAAcY,EAAWZ,YAAc,GAC/DC,MAAOW,EAAWX,MAAQW,EAAWX,MAAQ,GAC7CC,OAAQU,EAAWV,OAASU,EAAWV,OAAS,KAoCpD,OA/BE,kBAAC,IAAD,iBApBa,CACbwB,SAAU,CAAEF,KAAM,IAClBF,WAAY,CAAEE,KAAM,IAkBpB,CAEEzB,KAAK,QACLW,SAAU,EAAKA,SACfM,eAAgB,EAAKA,eACrBW,IAAK,EAAKpB,UAEV,kBAAC,IAAKqB,KAAN,CAAWC,MAAM,OAAO9B,KAAK,QAC3B,kBAAC,IAAD,OAGF,kBAAC,IAAK6B,KAAN,CAAWC,MAAM,cAAc9B,KAAK,eAClC,kBAAC,IAAD,OAGF,kBAAC,IAAK6B,KAAN,CAAWC,MAAM,QAAQ9B,KAAK,SAC5B,kBAAC,IAAD,OAGF,kBAAC,IAAK6B,KAAN,CAAWC,MAAM,SAAS9B,KAAK,UAC7B,kBAAC,IAAD,OAGF,kBAAC,IAAK6B,KAASP,EACb,kBAAC,IAAD,CAAQpC,KAAK,UAAU6C,SAAS,UAAhC,aA5DgB,uDAsEtB,OAAO,6BAAMrC,KAAK2B,kBAtEI,GACAhB,cA0EbC,cAAO,eAAPA,CAAuBC,GC5EhCyB,EAAQ7D,YAAQ,4MAElB8D,YAAc,WACZ,EAAK3D,MAAM4D,YAAYD,aAAY,GACnC,EAAK3D,MAAM4D,YAAYC,cAAa,IAJpB,EAMlBxB,SAAW,SAACC,GAMU,IALP,EAAKtC,MAAM4D,YAAYE,YAAYC,QAC9C,SAACC,GAAD,OACEA,EAAKC,WAAa3B,EAAO2B,UAAYD,EAAKE,WAAa5B,EAAO4B,YAGzDC,QACP,EAAKnE,MAAM4D,YAAYD,aAAY,GACnC,EAAK3D,MAAM4D,YAAYC,cAAa,GACpC,EAAK7D,MAAM4D,YAAYQ,eAAc,IAErCC,MAAM,+CAjBQ,EAqBlB1B,eAAiB,SAACC,GAChBC,QAAQC,IAAI,UAAWF,IAtBP,uDAyBhB,IAIMI,EAAa,CACjBC,WAAY,CAAEC,OAAQ,GAAIC,KAAM,KAElC,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,iBATW,CACbE,SAAU,CAAEF,KAAM,IAClBF,WAAY,CAAEE,KAAM,IAOlB,CAEEzB,KAAK,QACL4C,cAAe,CACbC,UAAU,GAEZlC,SAAUjB,KAAKiB,SACfM,eAAgBvB,KAAKuB,eACrB9B,MAAO,CAAEC,OAAQ,aAEjB,kBAAC,IAAKyC,KAAN,CACEC,MAAM,WACN9B,KAAK,WACL8C,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,iCAIb,kBAAC,IAAD,OAGF,kBAAC,IAAKnB,KAAN,CACEC,MAAM,WACN9B,KAAK,WACL8C,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,iCAIb,kBAAC,IAAMC,SAAP,OAGF,kBAAC,IAAKpB,KAASP,EACb,kBAAC,IAAD,CAAQpC,KAAK,UAAU6C,SAAS,UAAhC,WAKJ,yBAAK5C,MAAO,CAAE+D,UAAW,SAAU9D,OAAQ,wBACzC,qEACsC,IACpC,uBAAGG,QAASG,KAAKuC,aAAjB,eA/EQ,GACA5B,cAuFPC,cAAO,cAAPA,CAAsB0B,GCvF/BmB,EAAShF,YAAQ,4MAEnBgE,aAAe,WACb,EAAK7D,MAAM4D,YAAYD,aAAY,GACnC,EAAK3D,MAAM4D,YAAYC,cAAa,IAJnB,EAMnBxB,SAAW,SAACC,GACV,EAAKtC,MAAM4D,YAAYkB,QAAQxC,IAPd,EAUnBK,eAAiB,SAACC,GAChBC,QAAQC,IAAI,UAAWF,IAXN,uDAcjB,IAIMI,EAAa,CACjBC,WAAY,CAAEC,OAAQ,GAAIC,KAAM,KAElC,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,iBATW,CACbE,SAAU,CAAEF,KAAM,IAClBF,WAAY,CAAEE,KAAM,IAOlB,CAEEzB,KAAK,QACL4C,cAAe,CACbC,UAAU,GAEZlC,SAAUjB,KAAKiB,SACfM,eAAgBvB,KAAKuB,eACrB9B,MAAO,CAAEC,OAAQ,aAEjB,kBAAC,IAAKyC,KAAN,CACEC,MAAM,WACN9B,KAAK,WACL8C,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,iCAIb,kBAAC,IAAD,OAGF,kBAAC,IAAKnB,KAAN,CACEC,MAAM,WACN9B,KAAK,WACL8C,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,iCAIb,kBAAC,IAAMC,SAAP,OAGF,kBAAC,IAAKpB,KAASP,EACb,kBAAC,IAAD,CAAQpC,KAAK,UAAU6C,SAAS,UAAhC,YAKJ,yBAAK5C,MAAO,CAAE+D,UAAW,SAAU9D,OAAQ,wBACzC,6DAC8B,IAC5B,uBAAGG,QAASG,KAAKyC,cAAjB,eApES,GACA9B,cA4ERC,cAAO,cAAPA,CAAsB6C,GCtE/BE,EAAMlF,YAAQ,4MAEhBuE,cAAgB,WACd,EAAKpE,MAAM4D,YAAYD,aAAY,GAEnC,EAAK3D,MAAM4D,YAAYQ,eAAc,IALvB,uDAQd,OACE,6BACGhD,KAAKpB,MAAM4D,YAAYoB,WACtB,6BACE,kBAAC,IAAD,CAAQpE,KAAK,UAAUK,QAASG,KAAKgD,eAArC,UAEU,IACV,wBAAIa,UAAU,SACZ,6EAEF,kBAAC,EAAD,CAAa1C,WAAYnB,KAAKpB,MAAMC,aAAaiF,aACjD,wBAAID,UAAU,SACZ,qEAEF,kBAAC,EAAD,OAGF,GAGD7D,KAAKpB,MAAM4D,YAAYuB,SACtB,6BACG,IACD,kBAAC,EAAD,OAGF,GAGD/D,KAAKpB,MAAM4D,YAAYwB,UACtB,6BACG,IACD,kBAAC,EAAD,OAGF,QA3CQ,GACArD,cAkDLC,cAAO,cAAe,eAAtBA,CAAsC+C,GClDjCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBAxF,E,4DAEJyF,YAAc,G,KACdC,YAAc,G,KAGdnD,WAAa,SAACjB,GACZ,EAAKmE,YAAYE,QAAQrE,I,KAG3BrB,cAAgB,SAAC2F,GACf,EAAKH,YAAc,EAAKA,YAAY3B,QAClC,SAACxC,GAAD,OAAaA,EAAQG,OAASmE,EAAcnE,S,KAIhDtB,YAAc,SAAC0F,GACb,EAAKH,YAAcG,G,wDAKnB,OAAO1E,KAAKsE,c,iCAKZ,MAAO,CACLhE,KAAMN,KAAKuE,YAAYjE,KACvBC,YAAaP,KAAKuE,YAAYhE,YAC9BC,MAAOR,KAAKuE,YAAY/D,MACxBC,OAAQT,KAAKuE,YAAY9D,Y,KAK/BkE,YAAS9F,EAAc,CACrByF,YAAaM,IACbL,YAAaK,IACbxD,WAAYyD,IACZ/F,cAAe+F,IACf7F,YAAa6F,IACb5E,YAAa6E,IACbhB,WAAYgB,MAGd,IAEeC,EAFD,IAAIlG,EC9CZ2D,E,4DACJwC,SAAW,G,KACXC,OAAQ,E,KACRC,QAAS,E,KACTC,SAAU,E,KAEV5C,YAAc,SAAC6C,GACb,EAAKH,MAAQG,G,KAEf3C,aAAe,SAAC2C,GACd,EAAKF,OAASE,G,KAEhBpC,cAAgB,SAACoC,GACf,EAAKD,QAAUC,G,KAGjB1B,QAAU,SAACd,GACT,EAAKoC,SAAS3E,KAAKuC,GACnBK,MAAM,0CACN,EAAKiC,QAAS,EACd,EAAKD,OAAQ,G,wDAIb,OAAOjF,KAAKgF,W,+BAIZ,OAAOhF,KAAKiF,Q,gCAIZ,OAAOjF,KAAKkF,S,iCAIZ,OAAOlF,KAAKmF,Y,KAIhBR,YAASnC,EAAa,CACpByC,MAAOL,IACPM,OAAQN,IACRO,QAASP,IACTI,SAAUJ,IACVb,SAAUe,IACVd,UAAWc,IACXlB,WAAYkB,IACZpC,YAAaoC,IACbpB,QAASmB,IACTtC,YAAasC,IACbpC,aAAcoC,IACd7B,cAAe6B,MAEjB,IAEeE,EAFD,IAAIvC,EC/CZ6C,EACJ,kBAAC,IAAD,CAAUxG,aAAcA,EAAc2D,YAAaA,GACjD,kBAAC,EAAD,OAGJ8C,IAAShG,OAAO+F,EAAOE,SAASC,eAAe,SHqHzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvE,QAAQuE,MAAMA,EAAM1C,c","file":"static/js/main.7e11f84a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n//ant\r\nimport { Table, Space, Button } from \"antd\";\r\n//kết nối vs store\r\nimport { inject, observer } from \"mobx-react\";\r\n\r\nconst ProductList = observer(\r\n  class ProductList extends Component {\r\n    handleDelete = (record) => {\r\n      this.props.ProductStore.deleteProduct(record);\r\n    };\r\n\r\n    handleEdit = (record) => {\r\n      this.props.ProductStore.editProduct(record);\r\n    };\r\n    render() {\r\n      const columns = [\r\n        {\r\n          title: \"Name\",\r\n          dataIndex: \"name\",\r\n          key: \"name\",\r\n          align: \"center\",\r\n          render: (text) => <span>{text}</span>,\r\n        },\r\n        {\r\n          title: \"Description\",\r\n          dataIndex: \"description\",\r\n          key: \"description\",\r\n          align: \"center\",\r\n        },\r\n        {\r\n          title: \"Price\",\r\n          dataIndex: \"price\",\r\n          key: \"price\",\r\n          align: \"center\",\r\n          render: (text) => <span>{text} VNĐ</span>,\r\n        },\r\n        {\r\n          title: \"Amount\",\r\n          key: \"amount\",\r\n          dataIndex: \"amount\",\r\n          align: \"center\",\r\n          render: (text) => (\r\n            <span>\r\n              <Button type=\"primary\">-</Button>\r\n              <strong\r\n                style={{\r\n                  margin: \"0 10px\",\r\n                  color: `${+text > 0 ? \"blue\" : \"red\"}`,\r\n                }}\r\n              >\r\n                {+text > 0 ? text : \"Hết Hàng\"}\r\n              </strong>\r\n              <Button type=\"primary\">+</Button>\r\n            </span>\r\n          ),\r\n        },\r\n        {\r\n          title: \"Action\",\r\n          key: \"action\",\r\n          render: (\r\n            text,\r\n            record //record ở đây là cả object\r\n          ) => (\r\n            <Space size=\"middle\">\r\n              <Button type=\"primary\" onClick={() => this.handleEdit(record)}>\r\n                Edit\r\n              </Button>\r\n              <Button\r\n                type=\"primary\"\r\n                onClick={() => this.handleDelete(record)}\r\n                danger\r\n              >\r\n                Delete\r\n              </Button>\r\n            </Space>\r\n          ),\r\n        },\r\n      ];\r\n\r\n      let data = [];\r\n      this.props.ProductStore.getProducts.map((product, index) =>\r\n        data.push({\r\n          key: index,\r\n          name: product.name,\r\n          description: product.description,\r\n          price: product.price,\r\n          amount: product.amount,\r\n        })\r\n      );\r\n\r\n      return <Table columns={columns} dataSource={data} />;\r\n    }\r\n  }\r\n);\r\n\r\nexport default inject(\"ProductStore\")(ProductList);\r\n","import React, { Component } from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\n//kết nối vs store\r\nimport { inject, observer } from \"mobx-react\";\r\nconst ProductForm = observer(\r\n  class ProductForm extends Component {\r\n    formRef = React.createRef();\r\n\r\n    onFinish = (values) => {\r\n      this.props.ProductStore.deleteProduct(this.props.dataUpdate);\r\n      this.props.ProductStore.addProduct(values);\r\n      this.props.ProductStore.editProduct({});\r\n      this.formRef.current.resetFields(); //làm rỗng các trường\r\n    };\r\n\r\n    onFinishFailed = (errorInfo) => {\r\n      console.log(\"Failed:\", errorInfo);\r\n    };\r\n\r\n    renderForm = () => {\r\n      const layout = {\r\n        labelCol: { span: 10 }, //khoảnh cách từ bên phải\r\n        wrapperCol: { span: 4 }, //chiều dài\r\n      };\r\n      const tailLayout = {\r\n        wrapperCol: { offset: 11, span: 16 },\r\n      };\r\n      let xhtml = null;\r\n\r\n      if (this.props.dataUpdate.name) {\r\n        const { dataUpdate } = this.props;\r\n        this.formRef.current.setFieldsValue({\r\n          name: dataUpdate.name ? dataUpdate.name : \"\",\r\n          description: dataUpdate.description ? dataUpdate.description : \"\",\r\n          price: dataUpdate.price ? dataUpdate.price : \"\",\r\n          amount: dataUpdate.amount ? dataUpdate.amount : \"\",\r\n        });\r\n      }\r\n\r\n      xhtml = (\r\n        <Form\r\n          {...layout}\r\n          name=\"basic\"\r\n          onFinish={this.onFinish}\r\n          onFinishFailed={this.onFinishFailed}\r\n          ref={this.formRef}\r\n        >\r\n          <Form.Item label=\"Name\" name=\"name\">\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Description\" name=\"description\">\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Price\" name=\"price\">\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Amount\" name=\"amount\">\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item {...tailLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      );\r\n\r\n      return xhtml;\r\n    };\r\n    render() {\r\n      return <div>{this.renderForm()}</div>;\r\n    }\r\n  }\r\n);\r\n\r\nexport default inject(\"ProductStore\")(ProductForm);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { observer, inject } from \"mobx-react\";\r\nconst Login = observer(\r\n  class Login extends Component {\r\n    changeLogin = () => {\r\n      this.props.RouterStore.changeLogin(false);\r\n      this.props.RouterStore.changeSignup(true);\r\n    };\r\n    onFinish = (values) => {\r\n      const user = this.props.RouterStore.getListUser.filter(\r\n        (user) =>\r\n          user.username === values.username && user.password === values.password\r\n      );\r\n\r\n      if (user.length === 1) {\r\n        this.props.RouterStore.changeLogin(false);\r\n        this.props.RouterStore.changeSignup(false);\r\n        this.props.RouterStore.changeContent(true);\r\n      } else {\r\n        alert(\"Sai Thông Tin Đăng Nhập.\");\r\n      }\r\n    };\r\n\r\n    onFinishFailed = (errorInfo) => {\r\n      console.log(\"Failed:\", errorInfo);\r\n    };\r\n    render() {\r\n      const layout = {\r\n        labelCol: { span: 10 }, //khoảnh cách từ bên phải\r\n        wrapperCol: { span: 4 }, //chiều dài\r\n      };\r\n      const tailLayout = {\r\n        wrapperCol: { offset: 11, span: 16 },\r\n      };\r\n      return (\r\n        <Fragment>\r\n          <Form\r\n            {...layout}\r\n            name=\"basic\"\r\n            initialValues={{\r\n              remember: true,\r\n            }}\r\n            onFinish={this.onFinish}\r\n            onFinishFailed={this.onFinishFailed}\r\n            style={{ margin: \"150px 0\" }}\r\n          >\r\n            <Form.Item\r\n              label=\"Username\"\r\n              name=\"username\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your username!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Password\"\r\n              name=\"password\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your password!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailLayout}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Login\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n          <div style={{ textAlign: \"center\", margin: \"-150px 15px 0px 0px\" }}>\r\n            <small>\r\n              You don't have an account ? sign up{\" \"}\r\n              <a onClick={this.changeLogin}>here</a>\r\n            </small>\r\n          </div>\r\n        </Fragment>\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nexport default inject(\"RouterStore\")(Login);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nconst SignUp = observer(\r\n  class SignUp extends Component {\r\n    changeSignup = () => {\r\n      this.props.RouterStore.changeLogin(true);\r\n      this.props.RouterStore.changeSignup(false);\r\n    };\r\n    onFinish = (values) => {\r\n      this.props.RouterStore.addUser(values);\r\n    };\r\n\r\n    onFinishFailed = (errorInfo) => {\r\n      console.log(\"Failed:\", errorInfo);\r\n    };\r\n    render() {\r\n      const layout = {\r\n        labelCol: { span: 10 }, //khoảnh cách từ bên phải\r\n        wrapperCol: { span: 4 }, //chiều dài\r\n      };\r\n      const tailLayout = {\r\n        wrapperCol: { offset: 11, span: 16 },\r\n      };\r\n      return (\r\n        <Fragment>\r\n          <Form\r\n            {...layout}\r\n            name=\"basic\"\r\n            initialValues={{\r\n              remember: true,\r\n            }}\r\n            onFinish={this.onFinish}\r\n            onFinishFailed={this.onFinishFailed}\r\n            style={{ margin: \"150px 0\" }}\r\n          >\r\n            <Form.Item\r\n              label=\"Username\"\r\n              name=\"username\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your username!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              label=\"Password\"\r\n              name=\"password\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your password!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailLayout}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                SignUp\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n          <div style={{ textAlign: \"center\", margin: \"-150px 15px 0px 0px\" }}>\r\n            <small>\r\n              You have an account ? Login{\" \"}\r\n              <a onClick={this.changeSignup}>here</a>\r\n            </small>\r\n          </div>\r\n        </Fragment>\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nexport default inject(\"RouterStore\")(SignUp);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\nimport { observer, inject } from \"mobx-react\";\nimport { Button } from \"antd\";\n//component\nimport ProductList from \"./Component/ProductList\";\nimport ProductForm from \"./Component/ProductForm\";\nimport Login from \"./Component/Login\";\nimport SignUp from \"./Component/Signup\";\n\nconst App = observer(\n  class App extends Component {\n    changeContent = () => {\n      this.props.RouterStore.changeLogin(true);\n\n      this.props.RouterStore.changeContent(false);\n    };\n    render() {\n      return (\n        <div>\n          {this.props.RouterStore.getContent ? (\n            <div>\n              <Button type=\"primary\" onClick={this.changeContent}>\n                Logout\n              </Button>{\" \"}\n              <h2 className=\"title\">\n                <strong>Thêm Thông Tin Sản Phẩm.</strong>\n              </h2>\n              <ProductForm dataUpdate={this.props.ProductStore.getEditing} />\n              <h2 className=\"title\">\n                <strong>Danh Sách Sản Phẩm.</strong>\n              </h2>\n              <ProductList />\n            </div>\n          ) : (\n            \"\"\n          )}\n\n          {this.props.RouterStore.getLogin ? (\n            <div>\n              {\" \"}\n              <Login />\n            </div>\n          ) : (\n            \"\"\n          )}\n\n          {this.props.RouterStore.getSignup ? (\n            <div>\n              {\" \"}\n              <SignUp />\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n  }\n);\n\nexport default inject(\"RouterStore\", \"ProductStore\")(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { observable, computed, action, decorate } from \"mobx\";\r\n\r\nclass ProductStore {\r\n  //tạo quan sát\r\n  productList = [];\r\n  productEdit = {};\r\n\r\n  //tạo action\r\n  addProduct = (product) => {\r\n    this.productList.unshift(product); //cho lên đầu\r\n  };\r\n\r\n  deleteProduct = (productDelete) => {\r\n    this.productList = this.productList.filter(\r\n      (product) => product.name !== productDelete.name\r\n    );\r\n  };\r\n\r\n  editProduct = (editing) => {\r\n    this.productEdit = editing;\r\n  };\r\n\r\n  //tính toán để trả về\r\n  get getProducts() {\r\n    return this.productList;\r\n  }\r\n\r\n  get getEditing() {\r\n    // console.log(this.productEdit.name);\r\n    return {\r\n      name: this.productEdit.name,\r\n      description: this.productEdit.description,\r\n      price: this.productEdit.price,\r\n      amount: this.productEdit.amount,\r\n    };\r\n  }\r\n}\r\n\r\ndecorate(ProductStore, {\r\n  productList: observable,\r\n  productEdit: observable,\r\n  addProduct: action,\r\n  deleteProduct: action,\r\n  editProduct: action,\r\n  getProducts: computed,\r\n  getEditing: computed,\r\n});\r\n\r\nconst store = new ProductStore();\r\n\r\nexport default store;\r\n","import { observable, computed, action, decorate } from \"mobx\";\r\n\r\nclass RouterStore {\r\n  listUser = [];\r\n  login = true;\r\n  signup = false;\r\n  content = false;\r\n\r\n  changeLogin = (bool) => {\r\n    this.login = bool;\r\n  };\r\n  changeSignup = (bool) => {\r\n    this.signup = bool;\r\n  };\r\n  changeContent = (bool) => {\r\n    this.content = bool;\r\n  };\r\n\r\n  addUser = (user) => {\r\n    this.listUser.push(user);\r\n    alert(\"Đăng Kí Thành Công!\");\r\n    this.signup = false;\r\n    this.login = true;\r\n  };\r\n\r\n  get getListUser() {\r\n    return this.listUser;\r\n  }\r\n\r\n  get getLogin() {\r\n    return this.login;\r\n  }\r\n\r\n  get getSignup() {\r\n    return this.signup;\r\n  }\r\n\r\n  get getContent() {\r\n    return this.content;\r\n  }\r\n}\r\n\r\ndecorate(RouterStore, {\r\n  login: observable,\r\n  signup: observable,\r\n  content: observable,\r\n  listUser: observable,\r\n  getLogin: computed,\r\n  getSignup: computed,\r\n  getContent: computed,\r\n  getListUser: computed,\r\n  addUser: action,\r\n  changeLogin: action,\r\n  changeSignup: action,\r\n  changeContent: action,\r\n});\r\nconst store = new RouterStore();\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n//kết nối đến store\nimport { Provider } from \"mobx-react\";\nimport ProductStore from \"./Stores/ProductStore\";\nimport RouterStore from \"./Stores/RouterStore\";\nconst Roots = (\n  <Provider ProductStore={ProductStore} RouterStore={RouterStore}>\n    <App />\n  </Provider>\n);\nReactDOM.render(Roots, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}